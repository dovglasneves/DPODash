unit uFunctions;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, Math, Data.DB, FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef, FireDAC.Comp.Client, FireDAC.Comp.DataSet;

function FormatarTelefone(Value: string): string;
function FormataCEP(Value: string): string;
function FormataNome(sNome: string): string;
function VerificaDuplicidade(CliNome: String; Query: TFDQuery): Boolean;
function VerificaEmail(Value: string): Boolean;

implementation

function VerificaEmail(Value: string): Boolean;
begin
  if not Value = EmptyStr then
    if Pos('@',Value,1) = True then
      Result := True
      else
      Result := False;
end;

function VerificaDuplicidade(CliNome: String; Query: TFDQuery): Boolean;
begin
  //Verificar duplicidade e retorna False ou True
  Result := False;
  Query.Close;
  Query.SQL.Clear;
  Query.Open('SELECT * FROM clientes WHERE nome=' +QuotedStr(CliNome));
  if Query.RecordCount > 0 then
    Result := True;
end;

function FormatarTelefone(Value: String): String;
var
CI, CA, Num1, Num2: String;
begin
//Verifica número de caracteres do telefone
  case Trim(Value).Length of
    10:
    begin
      CA   := Copy(Trim(Value),1,2);
      Num1 := Copy(Trim(Value),3,4);
      Num2  := Copy(Trim(Value),7,4);
      Result := Format('(%2s) %4s-%4s', [CA, Num1, Num2]);
      //Output: (00) 0000-0000
    end;
    11:
    begin
      CA   := Copy(Trim(Value),1,2);
      Num1 := Copy(Trim(Value),3,5);
      Num2  := Copy(Trim(Value),8,4);
      Result := Format('(%2s) %5s-%4s', [CA, Num1, Num2]);
      //Output: (00) 00000-0000
    end;
    12:
    begin
      CI := Copy(Trim(Value),1,2);
      CA   := Copy(Trim(Value),3,2);
      Num1 := Copy(Trim(Value),5,4);
      Num2  := Copy(Trim(Value),9,4);
      Result := Format('+%2s (%2s) %4s-%4s', [CI, CA, Num1, Num2]);
      //Output: +55 (00) 0000-0000
    end;
    13:
    begin
      CI := Copy(Trim(Value),1,2);
      CA   := Copy(Trim(Value),3,2);
      Num1 := Copy(Trim(Value),5,5);
      Num2  := Copy(Trim(Value),10,4);
      Result := Format('+%2s (%2s) %5s-%4s', [CI, CA, Num1, Num2]);
      //Output: +55 (00) 00000-0000
    end;
  end;
end;

function FormataCEP(Value: String): String;
var
    Pref, Suff: String;
begin
//Input: 36010010 ==> Output: 36010-000
if Trim(Value).Length = 8 then
  begin
    Pref  := Copy(Value, 1, 5);
    Suff := Copy(Value, 6, 3);
    Result := Format('%5s/-%3s', [Pref, Suff]);
  end;
end;

function FormataNome(sNome: String): string;
const
Excecao: array[0..8] of string = (' da ', ' de ', ' do ', ' das ', ' dos ', ' e ', ' nº ', ' n° ', ' n ');
var
Tamanho, j: integer;
i: byte;
begin
  Result := AnsiLowerCase(sNome);
  Tamanho := Length(Result);
  for j := 1 to Tamanho do
    //Se é a primeira letra ou se o caracter anterior é um espaço
    if (j = 1) or ((j>1) and (Result[j-1]=Chr(32))) then
      Result[j] := AnsiUpperCase(Result[j])[1];
  for i := 0 to Length(Excecao)-1 do
    Result := StringReplace(Result,Excecao[i],Excecao[i],[rfReplaceAll, rfIgnoreCase]);
end;

end.
